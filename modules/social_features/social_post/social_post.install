<?php
/**
 * @file
 * Install, update and uninstall functions for the social_comment module.
 */

use Drupal\Core\Database\Database;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_install().
 *
 * Perform actions related to the installation of social_post.
 */
function social_post_install() {

  // Set some default permissions.
  _social_post_set_permissions();
}

/**
 * Function to set permissions.
 */
function _social_post_set_permissions() {
  $roles = \Drupal\user\Entity\Role::loadMultiple();

  /** @var \Drupal\user\Entity\Role $role */
  foreach ($roles as $role) {
    if ($role->id() === 'administrator') {
      continue;
    }

    $permissions = _social_post_get_permissions($role->id());
    user_role_grant_permissions($role->id(), $permissions);
  }
}

/**
 * @param $role
 * @return array
 */
function _social_post_get_permissions($role) {
  // Anonymous.
  $permissions['anonymous'] = array(
    'view public posts',
    'view published post entities',
  );

  // Authenticated.
  $permissions['authenticated'] = array_merge($permissions['anonymous'], array(
    'add post entities',
    'delete own post entities',
    'edit own post entities',
    'view community posts',
  ));


  // Content manager.
  $permissions['contentmanager'] = array_merge($permissions['authenticated'], array(
    'delete any post entities',
    'edit any post entities',
    'view unpublished post entities',
  ));

  // Site manager.
  $permissions['sitemanager'] = array_merge($permissions['contentmanager'], array(

  ));

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
  return [];
}

/**
 * Update social_post existing content.
 */
function social_post_update_8001() {
    $database = \Drupal::database();
    $table_post = 'post';
    $table_data = 'post_field_data';
    // Get the old data.
    $existing_data_post = $database->select($table_post)
        ->fields($table_post)
        ->execute()
        ->fetchAll(PDO::FETCH_ASSOC);
    // Wipe it.
    $database->truncate($table_post)->execute();

    $existing_data_data = $database->select($table_data)
        ->fields($table_data)
        ->execute()
        ->fetchAll(PDO::FETCH_ASSOC);
    // Wipe it.
    $database->truncate($table_data)->execute();

    // Add new field to tables.
    $spec = array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'post',
        'description' => 'The ID of the target entity.',
    );
    $schema = Database::getConnection()->schema();

    if($schema->fieldExists($table_post, 'type')) {
        $schema->changeField($table_post, 'type', 'type', $spec);
    } else {
        $schema->addField($table_post, 'type', $spec);
    }

    if($schema->fieldExists($table_data, 'type')) {
        $schema->changeField($table_data, 'type', 'type', $spec);
    } else {
        $schema->addField($table_data, 'type', $spec);
    }

    // Update definitions and schema.
    \Drupal::entityDefinitionUpdateManager()->applyUpdates();

    // Update config post_type.
    $path = drupal_get_path('module', 'social_post') . '/config/install';
    $config_factory = \Drupal::configFactory();
    $config_name = "social_post.post_type.post";
    $filepath = "{$path}/{$config_name}.yml";
    $data = Yaml::parse($filepath);
    if (is_array($data)) {
        $config_factory->getEditable($config_name)->setData($data)->save();
    }

    // Set the old data.
    $insert_query_post = $database
        ->insert($table_post)
        ->fields(array_keys(end($existing_data_post)));
    foreach ($existing_data_post as $row) {
        $insert_query_post->values(array_values($row));
    }
    $insert_query_post->execute();

    $insert_query_data = $database
        ->insert($table_data)
        ->fields(array_keys(end($existing_data_data)));
    foreach ($existing_data_data as $row) {
        $insert_query_data->values(array_values($row));
    }
    $insert_query_data->execute();

    // Unset default value for post entity
    $schema->fieldSetNoDefault($table_data, 'type');
    $schema->fieldSetNoDefault($table_data, 'type');
}
